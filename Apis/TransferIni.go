package main

import (
	"log"
	"strings"
	// "os"
	"encoding/json"
	"github.com/tidwall/gjson"
	"io/ioutil"
	// "reflect"
	"fmt"
)

type Pages struct {
	Chars []WordStr `json:"chars"`
}

type WordStr struct {
	Y         int    `json:"y"`
	X         int    `json:"x"`
	Rotation  int    `json:"rotation"`
	Character string `json:"character"`
	Size      int    `json:"size"`
}

type AutoGenerated struct {
	Padding int     `json:"padding"`
	Pages   []Pages `json:"pages"`
}

type TmpJson struct {
	Art []int `json:"layers"`
}

type TmpContext struct {
	Obj       string
	Pname     string
	Slug      string
	Height    int
	Layers    string
	Color     string
	Word      string
	imagePath string
}

func StringToRuneArr(s string, arr []rune) {
	src := []rune(s)
	for i, v := range src {
		if i >= len(arr) {
			break
		}
		arr[i] = v
	}
}

func main() {
	f, err := ioutil.ReadFile("file/index.html")
	if err != nil {
		log.Println(err.Error())
	}

	tmp := string(f)
	start_num := strings.Index(tmp, "SMApp(")
	end_num := strings.Index(tmp, "}) });")

	tmps := tmp[start_num+6 : end_num+1]

	sss := fmt.Sprintf("%v", gjson.Get(tmps, "artboards.#.layers"))
	s1 := strings.Replace(sss, "[[{", "{", -1)
	s2 := strings.Replace(s1, "}]]", "}", -1)
	var Tms TmpJson
	// // var Aut TmpContext
	json.Unmarshal([]byte(s2), &Tms)
	log.Println(s2)
	log.Println(Tms)
	// artboards := Tms.Art
	// // Aut = artboards[0]
	// log.Println(reflect.TypeOf(artboards))
	// log.Println(artboards)
	// log.Println(mm)
	// for i := 0; i < len(artboards); i++ {
	// 	log.Println(artboards[i])
	// }
}
