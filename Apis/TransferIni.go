package main

import (
	"log"
	"strings"
	// "os"
	"encoding/json"
	"fmt"
	"github.com/tidwall/gjson"
	"io/ioutil"
	"reflect"
)

type Pages struct {
	Chars []WordStr `json:"chars"`
}

type WordStr struct {
	Y         int    `json:"y"`
	X         int    `json:"x"`
	Rotation  int    `json:"rotation"`
	Character string `json:"character"`
	Size      int    `json:"size"`
}

type AutoGenerated struct {
	Padding int     `json:"padding"`
	Pages   []Pages `json:"pages"`
}

type TmpJson struct {
	Art []ObjectStr
}

func StringToRuneArr(s string, arr []rune) {
	src := []rune(s)
	for i, v := range src {
		if i >= len(arr) {
			break
		}
		arr[i] = v
	}
}

type ObjectStr struct {
	ObjectID string `json:"objectID"`
	Type     string `json:"type"`
	Name     string `json:"name"`
	Rect     struct {
		X      int `json:"x"`
		Y      int `json:"y"`
		Width  int `json:"width"`
		Height int `json:"height"`
	} `json:"rect"`
	Rotation  int           `json:"rotation"`
	Radius    int           `json:"radius"`
	Borders   []interface{} `json:"borders"`
	Fills     []interface{} `json:"fills"`
	Shadows   []interface{} `json:"shadows"`
	Opacity   int           `json:"opacity"`
	StyleName string        `json:"styleName"`
	Content   string        `json:"content"`
	Color     struct {
		R        int    `json:"r"`
		G        int    `json:"g"`
		B        int    `json:"b"`
		A        int    `json:"a"`
		ColorHex string `json:"color-hex"`
		ArgbHex  string `json:"argb-hex"`
		CSSRgba  string `json:"css-rgba"`
		UIColor  string `json:"ui-color"`
	} `json:"color"`
	FontSize      int      `json:"fontSize"`
	FontFace      string   `json:"fontFace"`
	TextAlign     string   `json:"textAlign"`
	LetterSpacing int      `json:"letterSpacing"`
	LineHeight    int      `json:"lineHeight"`
	CSS           []string `json:"css"`
}

func main() {
	f, err := ioutil.ReadFile("file/index.html")
	if err != nil {
		log.Println(err.Error())
	}

	tmp := string(f)
	start_num := strings.Index(tmp, "SMApp(")
	end_num := strings.Index(tmp, "}) });")

	tmps := tmp[start_num+6 : end_num+1]

	sss := fmt.Sprintf("%v", gjson.Get(tmps, "artboards.#.layers"))
	s1 := strings.Replace(sss, "[[{", "{", -1)
	s2 := strings.Replace(s1, "}]]", "}", -1)
	var Tms ObjectStr
	var Arrs map[string]interface{}
	// // var Aut TmpContext
	json.Unmarshal([]byte(s2), &Tms)
	json.Unmarshal([]byte(tmps), &Arrs)
	log.Println(Tms)
	log.Println(reflect.TypeOf(Arrs["artboards"]))
	// log.Println((Arrs["artboards"]))

	// artboards := Tms.Art
	// // Aut = artboards[0]
	// log.Println(reflect.TypeOf(artboards))
	// log.Println(artboards)
	// log.Println(mm)
	// for i := 0; i < len(artboards); i++ {
	// 	log.Println(artboards[i])
	// }
}
