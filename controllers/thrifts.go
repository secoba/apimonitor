package controllers

import (
	"encoding/json"
	"github.com/xuchengzhi/apimonitor/Thrift"
	"log"
	"strings"
)

type ThriftController struct {
	BaseController
}

// @Title Get
// @Description get paasid info from API
// @Param paasid path string true "The paasid name"
// @Param field query string true "field"
// @Success 201 {object} models.PaaSIdInfo
// @Failure 400 {object} models.StatusResponse
// @router /paas/:paasid [get]
func (this *ThriftController) ActRun() {
	msg := this.GetString("app")
	ips := this.GetString("ip")
	log.Println(ips)
	res := Thrift.ActRun(msg, ips)
	if res != "AutoPay服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}
	this.ServeJSON()
}

func (this *ThriftController) ADB() {
	res := Thrift.ADB()
	if res != "ADB服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}
	this.ServeJSON()
}

func (this *ThriftController) Atx() {
	res := Thrift.Atx()
	log.Println(res)
	if res != "Atx服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}
	this.ServeJSON()
}

type AutoGenerated struct {
	Order     string  `json:"order"`
	Datetime  string  `json:"datetime"`
	Font      string  `json:"font"`
	Payprice  float64 `json:"payprice"`
	Fontprice float64 `json:"fontprice"`
	Status    string  `json:"status"`
	Platform  string  `json:"platform"`
	User      string  `json:"user"`
}

func (this *ThriftController) Order() {
	msg := this.GetString("app")
	res, err := Thrift.Order(msg)
	resstr := strings.Replace(res, "'", "\"", -1)
	if err {
		var dat []AutoGenerated
		if err := json.Unmarshal([]byte(resstr), &dat); err == nil {
		}
		this.Data["json"] = Response{200, "success", dat}
	} else {
		this.Data["json"] = Response{2001, "error", res}
	}

	this.ServeJSON()
}

type DevJson struct {
	Status bool `json:"status"`
	Data   []struct {
		Mod     string `json:"mod"`
		Port    string `json:"port"`
		Version string `json:"version"`
		Memory  string `json:"memory"`
		CPU     string `json:"cpu"`
		Level   string `json:"level"`
		Sdk     string `json:"sdk"`
		IP      string `json:"ip"`
		Online  bool   `json:"Online"`
		Name    string `json:"name"`
		Img     string `json:"img"`
	} `json:"data"`
}

func (this *ThriftController) Device() {
	res := Thrift.Device()

	if res != "Device服务未启动" {

		resstr := strings.Replace(res, "'", "\"", -1)
		log.Println(resstr)
		var dat DevJson
		if err := json.Unmarshal([]byte(resstr), &dat); err == nil {
			this.Data["json"] = Response{200, "success", dat.Data}
		} else {
			this.Data["json"] = Response{2002, "error", "json格式化异常"}
			log.Println(err.Error())
		}

	} else {
		this.Data["json"] = Response{2001, "success", res}
	}

	this.ServeJSON()
}

func (this *ThriftController) Dev_up() {
	res := Thrift.DevUp()
	if res != "DevUp服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}

	this.ServeJSON()
}

func (this *ThriftController) ThriftAtxServer() {
	res := Thrift.ThriftAtxServer()
	if res != "ThriftService服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}
	// this.Data["json"] = Response{200, "success", res}
	this.ServeJSON()
}

func (this *ThriftController) ThriftAdbServer() {
	res := Thrift.ThriftAdbServer()
	if res != "ThriftService服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}
	this.ServeJSON()
}

func (this *ThriftController) ThriftActServer() {
	res := Thrift.ThriftActServer()
	if res != "ThriftService服务未启动" {
		this.Data["json"] = Response{200, "success", res}
	} else {
		this.Data["json"] = Response{2001, "success", res}
	}
	this.ServeJSON()
}

func (this *ThriftController) ThriftJavaServer() {
	res := Thrift.ThriftJavaServer()
	this.Data["json"] = Response{200, "success", res}
	this.ServeJSON()
}
